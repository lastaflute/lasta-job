/*
 * Copyright 2015-2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, 
 * either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */
package org.lastaflute.job;

import java.util.List;

import org.dbflute.optional.OptionalThing;
import org.lastaflute.job.exception.JobAlreadyUnscheduleException;
import org.lastaflute.job.key.LaJobKey;
import org.lastaflute.job.key.LaJobUnique;
import org.lastaflute.job.log.JobNoticeLogLevel;
import org.lastaflute.job.subsidiary.CronParamsSupplier;
import org.lastaflute.job.subsidiary.VaryingCronOpCall;

/**
 * @author jflute
 * @since 0.2.0 (2016/01/11 Monday)
 */
public interface LaScheduledJob {

    // ===================================================================================
    //                                                                          Basic Info
    //                                                                          ==========
    /**
     * @return The job key auto-generated by framework when schedule registration. (NotNull)
     */
    LaJobKey getJobKey();

    /**
     * @return The title expression of the job. (NotNull, EmptyAllowed)
     */
    OptionalThing<String> getJobTitle();

    /**
     * @return The optional job unique code provided by application when schedule registration. (NotNull, EmptyAllowed)
     */
    OptionalThing<LaJobUnique> getJobUnique();

    /**
     * @return The optional cron expression of the job e.g. '10 * * * *' (NotNull, EmptyAllowed: if non-cron)
     */
    OptionalThing<String> getCronExp();

    /**
     * @return The type of job component for your application. (NotNull)
     */
    Class<? extends LaJob> getJobType();

    /**
     * @return The optional supplier of cron parameters. (NotNull, EmptyAllowed: if no parameter)
     */
    OptionalThing<CronParamsSupplier> getParamsSupplier();

    /**
     * @return The level of notice log. (NotNull)
     */
    JobNoticeLogLevel getNoticeLogLevel();

    /**
     * @return true if execution type of concurrent is 'wait'.
     */
    boolean isConcurrentExecWait();

    /**
     * @return true if execution type of concurrent is 'quit'.
     */
    boolean isConcurrentExecQuit();

    /**
     * @return true if execution type of concurrent is 'error'.
     */
    boolean isConcurrentExecError();

    // ===================================================================================
    //                                                                            Behavior
    //                                                                            ========
    /**
     * Is the job actually executing now? <br>
     * If you want to stop it, use stopNow().
     * @return true if executing now.
     */
    boolean isExecutingNow();

    /**
     * Actually launch the job now (at other thread), no-related to cron time. <br>
     * If executing job exists, the launched job is waiting for <br>
     * finishing the executing job. (you can change the behavior by option)
     * @throws JobAlreadyUnscheduleException When the job is already unscheduled.
     */
    void launchNow();

    /**
     * Stop the executing job by Thread.interrupt() and runtime.stopIfNeeds(). <br>
     * So it's not always true that the job is stoped. (needs call sleep(), stopIfNeeds(), ...) <br>
     * If executing job does not exist, do nothing. <br>
     * You can call this even if the job is closed. (might be exeucuting even if closed)
     */
    void stopNow();

    /**
     * Reschedule the job by the cron expression and options. <br>
     * If executing job exists, the process continues until finishing. <br>
     * New cron schedule is used since next execution.
     * @param cronExp The new cron expression of the job e.g. '10 * * * *' (NotNull)
     * @param opLambda The callback to setup varying option for e.g. parameter. (NotNull)
     * @throws JobAlreadyUnscheduleException When the job is already unscheduled.
     */
    void reschedule(String cronExp, VaryingCronOpCall opLambda);

    /**
     * Unschedule the job, no more launched by cron and launghNow(). <br>
     * If the job is executing, the process continues until finishing. <br>
     * So call stopNow() if you want to stop it immediately. <br>
     * And you cannot find the job after unscheduling.
     * @throws JobAlreadyUnscheduleException When the job is already unscheduled.
     */
    void unschedule();

    /**
     * @return true if the job is unscheduled.
     */
    boolean isUnscheduled();

    /**
     * This job becomes non-cron so the job will not executed by scheduler. <br>
     * You can only execute by launchNow(). <br>
     * And you can restore the job as normal cron by reschedule(). <br>
     * Do nothing if already non-cron.
     * @throws JobAlreadyUnscheduleException When the job is already unscheduled.
     */
    void becomeNonCron();

    /**
     * @return true if the job is non-cron.
     */
    boolean isNonCron();

    // ===================================================================================
    //                                                                             Trigger
    //                                                                             =======
    /**
     * Register triggered job for success.
     * @param triggeredJob The job key of triggered job. (NotNull)
     * @throws JobAlreadyUnscheduleException When the job is already unscheduled.
     */
    void registerNext(LaJobKey triggeredJob);

    /**
     * Get the list of triggered job key.
     * @return The list of job key for triggered job. (NotNull)
     */
    List<LaJobKey> getTriggeredJobKeyList();

    // ===================================================================================
    //                                                                             Display
    //                                                                             =======
    /**
     * @return The display string for identity. (NotNull)
     */
    String toIdentityDisp();
}
